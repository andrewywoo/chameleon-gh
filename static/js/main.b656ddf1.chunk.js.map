{"version":3,"sources":["components/RandHexBoxList/RandHexBox/BoxOverlay/BoxOverlay.module.css","components/NavBar/NavBar.module.css","components/RandHexBoxList/RandHexBoxList.module.css","components/ControlBar/ControlBar.module.css","App.module.css","components/RandHexBoxList/RandHexBox/BoxOverlay/BoxOverlay.js","components/RandHexBoxList/RandHexBox/RandHexBox.js","components/RandHexBoxList/RandHexBoxList.js","components/NavBar/NavBar.js","components/ControlBar/ControlBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BoxOverlay","close","hexText","NavBar","brand","author","RandHexBoxList","ControlBar","App","state","isTextVisible","hideHexText","newState","Object","objectSpread","_this","setState","showHexText","setTimeout","this","style","opacity","react_default","a","createElement","className","classes","onMouseOver","onClick","props","del","randomHex","Component","randHexBox","view","push","console","log","join","backgroundColor","change","RandHexBox_BoxOverlay_BoxOverlay","randHexBoxList","rhbList","hexList","map","hex","index","RandHexBox_RandHexBox","key","hexColor","event","navBar","controlBar","add","onChange","switch","value","randHexList","getColor","addAnotherColor","toConsumableArray","deleteAColor","e","window","cancelBubble","stopPropagation","splice","changeColor","switchView","target","toLowerCase","Math","floor","random","toString","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b656ddf1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BoxOverlay\":\"BoxOverlay_BoxOverlay__2q7ZL\",\"close\":\"BoxOverlay_close__29Jvw\",\"hexText\":\"BoxOverlay_hexText__1Jkky\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__3gnnp\",\"brand\":\"NavBar_brand__1Q4-1\",\"author\":\"NavBar_author__mFPFm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RandHexBoxList\":\"RandHexBoxList_RandHexBoxList__3LJYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlBar\":\"ControlBar_ControlBar__-hysS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3p6DY\"};","import React, { Component } from \"react\";\nimport classes from \"./BoxOverlay.module.css\";\n\nclass BoxOverlay extends Component {\n  state = {\n    isTextVisible: true\n  };\n\n  hideHexText = () => {\n    const newState = { ...this.state };\n    newState.isTextVisible = false;\n    this.setState(newState);\n  };\n\n  showHexText = () => {\n    const newState = { ...this.state };\n    newState.isTextVisible = true;\n    this.setState(newState);\n    setTimeout(this.hideHexText, 2000);\n  };\n\n  componentDidMount() {\n    setTimeout(this.hideHexText, 2000);\n  }\n\n  render() {\n    const style = {\n      opacity: \"0\"\n    };\n\n    this.state.isTextVisible ? (style.opacity = 1) : (style.opacity = 0);\n\n    // (function() {\n    //   let flag = true;\n    //   return function() {\n    //     if (flag) {\n    //       flag = false;\n    //       this.showHexText();\n    //     }\n    //   };\n    // })();\n\n    //setTimeout(this.hideHexText, 2000);\n\n    return (\n      <div className={classes.BoxOverlay} onMouseOver={this.showHexText}>\n        <button\n          className={classes.close}\n          style={style}\n          onClick={this.props.del}\n        >\n          X\n        </button>\n        <p className={classes.hexText} style={style}>\n          {this.props.randomHex}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default BoxOverlay;\n","import React from \"react\";\nimport BoxOverlay from \"./BoxOverlay/BoxOverlay\";\nimport \"./RandHexBox.css\";\n\nconst randHexBox = props => {\n  let classes = [\"RandHexBox\"];\n  if (props.view === \"listed\") {\n    classes.push(\"list-view\");\n    console.log(classes.join(\" \"));\n  } else {\n    classes = [\"RandHexBox\"];\n    console.log(classes.join(\" \"));\n  }\n\n  return (\n    <div\n      className={classes.join(\" \")}\n      style={{ backgroundColor: props.randomHex }}\n      onClick={props.change}\n    >\n      <BoxOverlay randomHex={props.randomHex} del={props.del} />\n    </div>\n  );\n};\n\nexport default randHexBox;\n","import React from \"react\";\nimport RandHexBox from \"./RandHexBox/RandHexBox\";\nimport classes from \"./RandHexBoxList.module.css\";\n\nconst randHexBoxList = props => {\n  const rhbList = props.hexList.map((hex, index) => {\n    return (\n      <RandHexBox\n        key={index}\n        index={index}\n        randomHex={hex.hexColor}\n        view={props.view}\n        del={event => props.del(event, index)}\n        change={event => props.change(event, index)}\n      />\n    );\n  });\n\n  return <div className={classes.RandHexBoxList}>{rhbList}</div>;\n};\n\nexport default randHexBoxList;\n","import React from \"react\";\nimport classes from \"./NavBar.module.css\";\n\nconst navBar = () => {\n  return (\n    <header className={classes.NavBar}>\n      <div className={classes.brand}>Chameleon</div>\n      <div className={classes.author}>by Andrew Woo</div>\n    </header>\n  );\n};\n\nexport default navBar;\n","import React from \"react\";\nimport classes from \"./ControlBar.module.css\";\n\nconst controlBar = props => {\n  return (\n    <div className={classes.ControlBar}>\n      <button onClick={props.add}>Add Another Color</button>\n      <select onChange={props.switch}>\n        <option value=\"tiled\">Tiled</option>\n        <option value=\"listed\">Listed</option>\n      </select>\n    </div>\n  );\n};\n\nexport default controlBar;\n","import React, { Component } from \"react\";\nimport RandHexBoxList from \"./components/RandHexBoxList/RandHexBoxList\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport ControlBar from \"./components/ControlBar/ControlBar\";\nimport classes from \"./App.module.css\";\n\nclass App extends Component {\n  state = {\n    randHexList: [{ hexColor: this.getColor() }],\n    view: \"cards\"\n  };\n\n  getColor() {\n    return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n  }\n\n  addAnotherColor = () => {\n    const hexList = [...this.state.randHexList];\n    hexList.push({ hexColor: this.getColor() });\n    this.setState({ randHexList: hexList });\n  };\n\n  deleteAColor = (e, index) => {\n    if (!e) window.event.cancelBubble = true;\n    if (e.stopPropagation) e.stopPropagation();\n    const hexList = [...this.state.randHexList];\n    hexList.splice(index, 1);\n    this.setState({ randHexList: hexList });\n  };\n\n  changeColor = (e, index) => {\n    const hexList = [...this.state.randHexList];\n    hexList[index].hexColor = this.getColor();\n    this.setState({ randHexList: hexList });\n  };\n\n  switchView = event => {\n    let value = event.target.value.toLowerCase();\n    switch (value) {\n      case \"tiled\":\n        this.setState({ view: \"tiled\" });\n        break;\n      case \"listed\":\n        this.setState({ view: \"listed\" });\n        break;\n      default:\n        this.setState({ view: \"tiled\" });\n    }\n  };\n\n  render() {\n    return (\n      <div className={classes.App}>\n        <NavBar />\n        <ControlBar add={this.addAnotherColor} switch={this.switchView} />\n        <RandHexBoxList\n          hexList={this.state.randHexList}\n          view={this.state.view}\n          del={this.deleteAColor}\n          change={this.changeColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}