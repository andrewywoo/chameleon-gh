{"version":3,"sources":["components/NavBar/NavBar.module.css","components/RandHexBoxList/RandHexBox/BoxOverlay/BoxOverlay.module.css","components/RandHexBoxList/RandHexBox/RandHexBox.module.css","components/RandHexBoxList/RandHexBoxList.module.css","App.module.css","components/RandHexBoxList/RandHexBox/BoxOverlay/BoxOverlay.js","components/RandHexBoxList/RandHexBox/RandHexBox.js","components/RandHexBoxList/RandHexBoxList.js","components/NavBar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","brand","author","hexText","RandHexBox","RandHexBoxList","App","BoxOverlay","state","isTextVisible","hideHexText","newState","Object","objectSpread","_this","setState","showHexText","style","opacity","this","setTimeout","react_default","a","createElement","className","classes","props","randomHex","Component","randHexBox","backgroundColor","onClick","clicked","bind","index","RandHexBox_BoxOverlay_BoxOverlay","randHexBoxList","rhbList","hexList","map","hex","key","hexColor","navBar","getColor","Math","floor","random","toString","randHexList","addAnotherColor","addRandHex","toConsumableArray","push","deleteAColor","removeRandHex","splice","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26e837ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__3gnnp\",\"brand\":\"NavBar_brand__1Q4-1\",\"author\":\"NavBar_author__mFPFm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hexText\":\"BoxOverlay_hexText__1Jkky\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RandHexBox\":\"RandHexBox_RandHexBox__1XAG_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RandHexBoxList\":\"RandHexBoxList_RandHexBoxList__3LJYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3p6DY\"};","import React, { Component } from \"react\";\nimport classes from \"./BoxOverlay.module.css\";\n\nclass BoxOverlay extends Component {\n  state = {\n    isTextVisible: true\n  };\n\n  hideHexText = () => {\n    const newState = { ...this.state };\n    newState.isTextVisible = false;\n    this.setState(newState);\n  };\n\n  showHexText = () => {\n    const newState = { ...this.state };\n    newState.isTextVisible = true;\n    this.setState(newState);\n  };\n\n  render() {\n    const style = {\n      opacity: \"0\"\n    };\n\n    this.state.isTextVisible ? (style.opacity = 1) : (style.opacity = 0);\n\n    setTimeout(this.hideHexText, 2000);\n\n    return (\n      <p className={classes.hexText} style={style}>\n        {this.props.randomHex}\n      </p>\n    );\n  }\n}\n\nexport default BoxOverlay;\n","import React from \"react\";\nimport BoxOverlay from \"./BoxOverlay/BoxOverlay\";\nimport classes from \"./RandHexBox.module.css\";\n\nconst randHexBox = props => {\n  return (\n    <div\n      className={classes.RandHexBox}\n      style={{ backgroundColor: props.randomHex }}\n      onClick={props.clicked.bind(this, props.index)}\n    >\n      <BoxOverlay randomHex={props.randomHex} index={props.index} />\n    </div>\n  );\n};\n\nexport default randHexBox;\n","import React from \"react\";\nimport RandHexBox from \"./RandHexBox/RandHexBox\";\nimport classes from \"./RandHexBoxList.module.css\";\n\nconst randHexBoxList = props => {\n  const rhbList = props.hexList.map((hex, index) => {\n    return (\n      <RandHexBox\n        key={index}\n        index={index}\n        randomHex={hex.hexColor}\n        clicked={props.clicked}\n      />\n    );\n  });\n\n  return <div className={classes.RandHexBoxList}>{rhbList}</div>;\n};\n\nexport default randHexBoxList;\n","import React from \"react\";\nimport classes from \"./NavBar.module.css\";\n\nconst navBar = () => {\n  return (\n    <header className={classes.NavBar}>\n      <div className={classes.brand}>Chameleon</div>\n      <div className={classes.author}>by Andrew Woo</div>\n    </header>\n  );\n};\n\nexport default navBar;\n","import React, { Component } from \"react\";\nimport RandHexBoxList from \"./components/RandHexBoxList/RandHexBoxList\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport classes from \"./App.module.css\";\n\nclass App extends Component {\n  getColor = () => \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n\n  state = {\n    randHexList: [{ hexColor: this.getColor() }]\n  };\n\n  addAnotherColor = () => {\n    const addRandHex = [...this.state.randHexList];\n    addRandHex.push({ hexColor: this.getColor() });\n    this.setState({ randHexList: addRandHex });\n  };\n\n  deleteAColor = index => {\n    const removeRandHex = [...this.state.randHexList];\n    removeRandHex.splice(index, 1);\n    this.setState({ randHexList: removeRandHex });\n  };\n\n  render() {\n    return (\n      <div className={classes.App}>\n        <NavBar />\n        <button onClick={this.addAnotherColor}>Add Another Color</button>\n        <RandHexBoxList\n          hexList={this.state.randHexList}\n          clicked={this.deleteAColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}