{"version":3,"sources":["App.module.css","components/NavBar/NavBar.module.css","components/RandHexBoxList/RandHexBox/BoxOverlay/BoxOverlay.js","components/RandHexBoxList/RandHexBox/RandHexBox.js","components/RandHexBoxList/RandHexBoxList.js","components/NavBar/NavBar.js","App.js","serviceWorker.js","index.js","components/RandHexBoxList/RandHexBox/RandHexBox.module.css","components/RandHexBoxList/RandHexBoxList.module.css"],"names":["module","exports","App","NavBar","brand","boxOverlay","props","react_default","a","createElement","style","visibility","isVisible","randomHex","randHexBox","className","classes","RandHexBox","backgroundColor","onClick","clicked","bind","index","BoxOverlay","randHexBoxList","rhbList","hexList","map","hex","key","hexColor","hover","RandHexBoxList","navBar","getColor","Math","floor","random","toString","state","randHexList","_this","showHexText","Object","toConsumableArray","setState","addAnotherColor","addRandHex","push","deleteAColor","removeRandHex","splice","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,IAAA,8FCAlBF,EAAAC,QAAA,CAAkBE,OAAA,uBAAAC,MAAA,uJCKHC,EAJI,SAAAC,GACjB,OAAOC,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEC,WAAYL,EAAMM,YAAcN,EAAMO,4BCmB5CC,EAlBI,SAAAR,GACjB,OACEC,EAAAC,EAAAC,cAAA,OACEM,UAAWC,IAAQC,WACnBP,MAAO,CAAEQ,gBAAiBZ,EAAMO,WAChCM,QAASb,EAAMc,QAAQC,YAAWf,EAAMgB,QAIxCf,EAAAC,EAAAC,cAACc,EAAD,CACEV,UAAWP,EAAMO,UACjBD,UAAWN,EAAMM,UACjBU,MAAOhB,EAAMgB,0BCKNE,EAjBQ,SAAAlB,GACrB,IAAMmB,EAAUnB,EAAMoB,QAAQC,IAAI,SAACC,EAAKN,GACtC,OACEf,EAAAC,EAAAC,cAACQ,EAAD,CACEY,IAAKP,EACLA,MAAOA,EACPT,UAAWe,EAAIE,SACflB,UAAWgB,EAAIjB,WACfS,QAASd,EAAMc,QACfW,MAAOzB,EAAMyB,UAKnB,OAAOxB,EAAAC,EAAAC,cAAA,OAAKM,UAAWC,IAAQgB,gBAAiBP,oBCPnCQ,EARA,WACb,OACE1B,EAAAC,EAAAC,cAAA,UAAQM,UAAWC,IAAQb,QACzBI,EAAAC,EAAAC,cAAA,OAAKM,UAAWC,IAAQZ,OAAxB,gCCyCSF,6MAzCbgC,SAAW,iBAAM,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,OAErEC,MAAQ,CACNC,YAAa,CAAC,CAAEV,SAAUW,EAAKP,WAAYvB,WAAY,eAGzD+B,YAAc,SAAApB,GACZ,IAAMI,EAAOiB,OAAAC,EAAA,EAAAD,CAAOF,EAAKF,MAAMC,aACD,WAA9Bd,EAAQJ,GAAOX,WACVe,EAAQJ,GAAOX,WAAa,UAC5Be,EAAQJ,GAAOX,WAAa,SACjC8B,EAAKI,SAAS,CAAEL,YAAad,OAG/BoB,gBAAkB,WAChB,IAAMC,EAAUJ,OAAAC,EAAA,EAAAD,CAAOF,EAAKF,MAAMC,aAClCO,EAAWC,KAAK,CAAElB,SAAUW,EAAKP,WAAYvB,WAAY,YACzD8B,EAAKI,SAAS,CAAEL,YAAaO,OAG/BE,aAAe,SAAA3B,GACb,IAAM4B,EAAaP,OAAAC,EAAA,EAAAD,CAAOF,EAAKF,MAAMC,aACrCU,EAAcC,OAAO7B,EAAO,GAC5BmB,EAAKI,SAAS,CAAEL,YAAaU,6EAI7B,OACE3C,EAAAC,EAAAC,cAAA,OAAKM,UAAWC,IAAQd,KACtBK,EAAAC,EAAAC,cAACN,EAAD,MACAI,EAAAC,EAAAC,cAAA,UAAQU,QAASiC,KAAKN,iBAAtB,qBACAvC,EAAAC,EAAAC,cAACuB,EAAD,CACEN,QAAS0B,KAAKb,MAAMC,YACpBpB,QAASgC,KAAKH,aACdlB,MAAOqB,KAAKV,sBAnCJW,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInBrE,EAAAC,QAAA,CAAkBgB,WAAA,mDCAlBjB,EAAAC,QAAA,CAAkB+B,eAAA","file":"static/js/main.5bc4b58e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3p6DY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__3gnnp\",\"brand\":\"NavBar_brand__1Q4-1\"};","import React from \"react\";\n\nconst boxOverlay = props => {\n  return <p style={{ visibility: props.isVisible }}>{props.randomHex}</p>;\n};\n\nexport default boxOverlay;\n","import React from \"react\";\nimport BoxOverlay from \"./BoxOverlay/BoxOverlay\";\nimport classes from \"./RandHexBox.module.css\";\n\nconst randHexBox = props => {\n  return (\n    <div\n      className={classes.RandHexBox}\n      style={{ backgroundColor: props.randomHex }}\n      onClick={props.clicked.bind(this, props.index)}\n      //onMouseOver={props.hover.bind(this, props.index)}\n      //onMouseLeave={props.hover.bind(this, props.index)}\n    >\n      <BoxOverlay\n        randomHex={props.randomHex}\n        isVisible={props.isVisible}\n        index={props.index}\n      />\n    </div>\n  );\n};\n\nexport default randHexBox;\n","import React from \"react\";\nimport RandHexBox from \"./RandHexBox/RandHexBox\";\nimport classes from \"./RandHexBoxList.module.css\";\n\nconst randHexBoxList = props => {\n  const rhbList = props.hexList.map((hex, index) => {\n    return (\n      <RandHexBox\n        key={index}\n        index={index}\n        randomHex={hex.hexColor}\n        isVisible={hex.visibility}\n        clicked={props.clicked}\n        hover={props.hover}\n      />\n    );\n  });\n\n  return <div className={classes.RandHexBoxList}>{rhbList}</div>;\n};\n\nexport default randHexBoxList;\n","import React from \"react\";\nimport classes from \"./NavBar.module.css\";\n\nconst navBar = () => {\n  return (\n    <header className={classes.NavBar}>\n      <div className={classes.brand}>Chameleon</div>\n    </header>\n  );\n};\n\nexport default navBar;\n","import React, { Component } from \"react\";\nimport RandHexBoxList from \"./components/RandHexBoxList/RandHexBoxList\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport classes from \"./App.module.css\";\n\nclass App extends Component {\n  getColor = () => \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n\n  state = {\n    randHexList: [{ hexColor: this.getColor(), visibility: \"visible\" }]\n  };\n\n  showHexText = index => {\n    const hexList = [...this.state.randHexList];\n    hexList[index].visibility === \"hidden\"\n      ? (hexList[index].visibility = \"visible\")\n      : (hexList[index].visibility = \"hidden\");\n    this.setState({ randHexList: hexList });\n  };\n\n  addAnotherColor = () => {\n    const addRandHex = [...this.state.randHexList];\n    addRandHex.push({ hexColor: this.getColor(), visibility: \"visible\" });\n    this.setState({ randHexList: addRandHex });\n  };\n\n  deleteAColor = index => {\n    const removeRandHex = [...this.state.randHexList];\n    removeRandHex.splice(index, 1);\n    this.setState({ randHexList: removeRandHex });\n  };\n\n  render() {\n    return (\n      <div className={classes.App}>\n        <NavBar />\n        <button onClick={this.addAnotherColor}>Add Another Color</button>\n        <RandHexBoxList\n          hexList={this.state.randHexList}\n          clicked={this.deleteAColor}\n          hover={this.showHexText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RandHexBox\":\"RandHexBox_RandHexBox__1XAG_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RandHexBoxList\":\"RandHexBoxList_RandHexBoxList__3LJYE\"};"],"sourceRoot":""}